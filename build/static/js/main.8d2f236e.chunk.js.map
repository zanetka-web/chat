{"version":3,"sources":["components/Store.js","components/Login.js","components/Message.js","components/Messages.js","components/InputMessage.js","components/Chat.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Socket","WebSocket","initState","messages","user","logged","info","reducer","state","action","type","localStorage","setItem","payload","error","msg","from","message","send","JSON","stringify","CTX","React","createContext","Store","props","useReducer","dispatch","onopen","event","console","log","onmessage","data","parse","reverse","onclose","onerror","useEffect","msgLength","length","lastMsg","document","hasFocus","window","Notification","permission","requestPermission","then","Provider","value","children","Login","useState","getItem","setUser","useContext","className","onChange","e","target","placeholder","onClick","disabled","Message","Messages","map","key","id","InputMessage","currentMsg","setMsg","Chat","Dashboard","screen","changeScreen","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8d2f236e.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\r\n\r\nconst Socket = new WebSocket(\"ws://chat.shas.tel\");\r\n\r\nconst sendMessage = function (msg) {\r\n    Socket.send(JSON.stringify(msg));\r\n}\r\n\r\nfunction notifyMe(msg) {\r\n    if (!(\"Notification\" in window)) {\r\n        console.error('browser can not show notifications');\r\n    }\r\n    else if (Notification.permission === \"granted\") {\r\n        new Notification(msg);\r\n    }\r\n    else if (Notification.permission !== \"denied\") {\r\n        Notification.requestPermission().then(function (permission) {\r\n            if (permission === \"granted\") {\r\n                new Notification(msg);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nconst initState = {\r\n    messages: [],\r\n    user: null,\r\n    logged: false,\r\n    info: ''\r\n}\r\n\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            localStorage.setItem('user', action.payload);\r\n            return { ...state, user: action.payload };\r\n        case 'LOGIN':\r\n            return { ...state, logged: true, info: '' };\r\n        case 'LOGOUT':\r\n            let info = '';\r\n            \r\n            if(action.payload.error) {\r\n                info = 'You were disconnected, click in login to join the chat again...';\r\n            }\r\n\r\n            return { ...state, logged: false, messages: [] , info : info};\r\n        case 'RECEIVE_MSG':\r\n            return { ...state, messages: [...state.messages, ...action.payload] };\r\n        case 'SEND_MSG':\r\n            sendMessage({ from: state.user, message: action.payload });\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const CTX = React.createContext();\r\n\r\nfunction Store(props) {\r\n    const [state, dispatch] = useReducer(reducer, initState);\r\n\r\n    Socket.onopen = (event) => {\r\n        console.log('connected', event);\r\n    };\r\n\r\n    Socket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data).reverse();\r\n        dispatch({ type: 'RECEIVE_MSG', payload: data });\r\n    }\r\n\r\n    Socket.onclose = () => {\r\n        dispatch({ type: 'LOGOUT' });\r\n    }\r\n\r\n    Socket.onerror = () => {\r\n        dispatch({ type: 'LOGOUT', payload: { error: true } });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const msgLength = state.messages.length;\r\n        const lastMsg = msgLength && state.messages[msgLength - 1];\r\n\r\n        if (lastMsg && state.user !== lastMsg.from && state.logged && !document.hasFocus()) {\r\n            notifyMe(`From: ${lastMsg.from} - ${lastMsg.message}`);\r\n        }\r\n    });\r\n\r\n    return <CTX.Provider value={{ state, dispatch }}>\r\n        {props.children}\r\n    </CTX.Provider>\r\n}\r\n\r\nexport default Store;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { CTX } from './Store';\r\n\r\nfunction Login() {\r\n    const [user, setUser] = useState(localStorage.getItem('user') || '');\r\n    const { state, dispatch } = useContext(CTX);\r\n    const changeUserName = (e) => {\r\n        setUser(e.target.value);\r\n    }\r\n    const onClick = () => {\r\n        if(user) {\r\n            dispatch({ type: 'SET_USER', payload: user });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (state.user) {\r\n            dispatch({ type: 'LOGIN' });\r\n        }\r\n    }, [state.user, dispatch]);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <input type=\"text\" onChange={changeUserName} value={user} placeholder=\"Nickname...\"></input>\r\n            <button onClick={onClick} disabled={!user}>Login</button>\r\n            <p className=\"info\">{state.info}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className={props.user === props.message.from ? 'message me' : 'message'}>\r\n            <span className=\"user\">{props.message.from}</span>\r\n            <span className=\"text\">{props.message.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, { useContext } from 'react';\r\nimport { CTX } from './Store';\r\nimport Message from './Message';\r\n\r\nfunction Messages() {\r\n    const { state } = useContext(CTX);\r\n\r\n    return (\r\n        <div className=\"messages\">\r\n            {state.messages.map((msg) => {\r\n                return <Message message={msg} key={msg.id} user={state.user} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React, { useContext, useState } from 'react';\r\nimport { CTX } from './Store';\r\n\r\nfunction InputMessage() {\r\n    const { dispatch } = useContext(CTX);\r\n    const [ currentMsg, setMsg ] = useState('');\r\n\r\n    const updateMsg = (e) => {\r\n        setMsg(e.target.value);\r\n    };\r\n\r\n    const sendMsg = () => {\r\n        dispatch({ type: 'SEND_MSG', payload: currentMsg });\r\n        setMsg('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-message\">\r\n            <input type=\"text\" placeholder=\"Add msg here...\" value={currentMsg} onChange={updateMsg}></input>\r\n            <button onClick={sendMsg}>SEND</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputMessage;","import React from 'react';\r\nimport Messages from './Messages';\r\nimport InputMessage from './InputMessage';\r\n\r\nfunction Chat() {\r\n\r\n    return (\r\n        <div>\r\n            <Messages />\r\n            <InputMessage></InputMessage>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { CTX } from './Store';\r\nimport Login from './Login';\r\nimport Chat from './Chat';\r\n\r\nfunction Dashboard() {\r\n    const { state } = useContext(CTX);\r\n    const [screen, changeScreen] = useState(<Login />);\r\n\r\n    useEffect(() => {\r\n        if (state.logged) {\r\n            changeScreen(<Chat />);\r\n        } else {\r\n            changeScreen(<Login />);\r\n        }\r\n    }, [state.logged]);\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <h1>RS School - Chat</h1>\r\n            {screen}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Store from './components/Store';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n\n  return (\n    <Store>\n      <Dashboard />\n    </Store>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}